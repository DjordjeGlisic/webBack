// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models;

#nullable disable

namespace aprilski2024.Migrations
{
    [DbContext(typeof(BioskopContext))]
    partial class BioskopContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Models.Karta", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<float>("Cena")
                        .HasColumnType("real");

                    b.Property<bool>("Kupljena")
                        .HasColumnType("bit");

                    b.Property<int>("PripadaProjekcijiID")
                        .HasColumnType("int");

                    b.Property<int>("Red")
                        .HasColumnType("int");

                    b.Property<int>("Sediste")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PripadaProjekcijiID");

                    b.ToTable("Karta");
                });

            modelBuilder.Entity("Models.Projekcija", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<int>("LokacijaID")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("Sifra")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("LokacijaID");

                    b.ToTable("Projekcija");
                });

            modelBuilder.Entity("Models.Sala", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Redovi")
                        .HasColumnType("int");

                    b.Property<int>("Sedista")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Sala");
                });

            modelBuilder.Entity("Models.Karta", b =>
                {
                    b.HasOne("Models.Projekcija", "PripadaProjekciji")
                        .WithMany("Karte")
                        .HasForeignKey("PripadaProjekcijiID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PripadaProjekciji");
                });

            modelBuilder.Entity("Models.Projekcija", b =>
                {
                    b.HasOne("Models.Sala", "Lokacija")
                        .WithMany("Projekcije")
                        .HasForeignKey("LokacijaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lokacija");
                });

            modelBuilder.Entity("Models.Projekcija", b =>
                {
                    b.Navigation("Karte");
                });

            modelBuilder.Entity("Models.Sala", b =>
                {
                    b.Navigation("Projekcije");
                });
#pragma warning restore 612, 618
        }
    }
}
